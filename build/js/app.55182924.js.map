{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/victor/index.js","webpack:///./src/scripts/utils.js","webpack:///./src/scripts/Boid.js","webpack:///./src/scripts/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Victor","x","y","this","fromArray","arr","fromObject","obj","addX","vec","addY","add","addScalar","scalar","addScalarX","addScalarY","subtractX","subtractY","subtract","subtractScalar","subtractScalarX","subtractScalarY","divideX","vector","divideY","divide","divideScalar","divideScalarX","divideScalarY","invertX","invertY","invert","multiplyX","multiplyY","multiply","multiplyScalar","multiplyScalarX","multiplyScalarY","normalize","length","norm","limit","max","factor","Math","abs","randomize","topLeft","bottomRight","randomizeX","randomizeY","min","random","randomizeAny","round","unfloat","toFixed","precision","mixX","amount","mixY","mix","clone","copyX","copyY","copy","zero","dot","vec2","cross","projectOnto","coeff","horizontalAngle","atan2","horizontalAngleDeg","radian2degrees","verticalAngle","verticalAngleDeg","angle","angleDeg","direction","rotate","nx","cos","sin","ny","rotateDeg","degrees2radian","rotateTo","rotation","rotateToDeg","rotateBy","rotateByDeg","distanceX","absDistanceX","distanceY","absDistanceY","distance","sqrt","distanceSq","dx","dy","lengthSq","magnitude","isZero","isEqualTo","toString","toArray","toObject","degrees","PI","floor","rad","deg","getRandomInt","exclude","ceil","result","getRandomFloat","setMagnitude","mag","Boid","constructor","color","radius","position","width","height","velocity","acceleration","perceptionRadius","maxForce","maxSpeed","bound","update","align","boidsArr","steering","total","forEach","otherBoid","cohesion","separation","diff","draw","beginPath","arc","fillStyle","fill","flock","alignmentVal","cohesionVal","separationVal","alignment","execute","window","innerWidth","innerHeight","canvas","document","querySelector","alignmentSlider","getElementById","cohesionSlider","separationSlider","resetBtn","addEventListener","getContext","colors","push","animate","requestAnimationFrame","fillRect","boid"],"mappings":"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","file":"js/app.55182924.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","export function getRandomInt(min, max, exclude = 0) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  const result = Math.floor(Math.random() * (max - min + 1)) + min;\n\n  if (result === exclude) {\n    getRandomInt(min, max, exclude);\n  } else {\n    return result;\n  }\n}\n\nexport function getRandomFloat(min, max) {\n  return min + Math.random() * (max - min);\n}\n\nexport function limit(vec, max) {\n  let vecSq = vec.lengthSq();\n\n  if (vecSq > max * max) {\n    vec.divide(Math.sqrt(vecSq)).multiplyScalar(max);\n  }\n}\n\nexport function setMagnitude(vec, mag) {\n  return vec.normalize().multiplyScalar(mag);\n}\n","import Victor from \"victor\";\nimport { width, height } from \"./index\";\nimport { getRandomFloat, setMagnitude, limit } from \"./utils\";\n\nclass Boid {\n  constructor(c, color, radius) {\n    this.position = new Victor(\n      getRandomFloat(0, width),\n      getRandomFloat(0, height)\n    );\n    this.velocity = new Victor(1, 1).rotateByDeg(getRandomFloat(0, 360));\n    setMagnitude(this.velocity, getRandomFloat(2, 4));\n\n    this.acceleration = new Victor();\n    this.perceptionRadius = 50;\n\n    this.c = c;\n    this.color = color;\n    this.radius = radius;\n    this.maxForce = 0.02;\n    this.maxSpeed = 10;\n  }\n\n  bound() {\n    if (this.position.x > width) {\n      this.position.x = 0;\n    } else if (this.position.x < 0) {\n      this.position.x = width;\n    }\n\n    if (this.position.y > height) {\n      this.position.y = 0;\n    } else if (this.position.y < 0) {\n      this.position.y = height;\n    }\n\n    /* if (\n      this.position.x + this.velocity.x > width - this.radius ||\n      this.position.x + this.velocity.x < this.radius\n    ) {\n      this.velocity.x = -this.velocity.x;\n    }\n\n    if (\n      this.position.y + this.velocity.y > height - this.radius ||\n      this.position.y + this.velocity.y < this.radius\n    ) {\n      this.velocity.y = -this.velocity.y;\n    } */\n  }\n\n  update() {\n    this.position.add(this.velocity);\n    this.velocity.add(this.acceleration);\n    this.velocity.limit(this.maxSpeed, this.maxSpeed);\n    this.acceleration.multiplyScalar(0);\n  }\n\n  align(boidsArr) {\n    let steering = new Victor();\n\n    let total = 0;\n\n    boidsArr.forEach((otherBoid) => {\n      let d = this.position.distance(otherBoid.position);\n\n      if (otherBoid !== this && d < this.perceptionRadius) {\n        steering.add(otherBoid.velocity);\n        total++;\n      }\n    });\n\n    if (total > 0) {\n      steering.divideScalar(total);\n      setMagnitude(steering, this.maxSpeed);\n      steering.subtract(this.velocity);\n\n      /* limit(steering, this.maxForce); */\n      steering.limit(this.maxForce, this.maxForce);\n    }\n\n    return steering;\n  }\n\n  cohesion(boidsArr) {\n    let steering = new Victor();\n\n    let total = 0;\n\n    boidsArr.forEach((otherBoid) => {\n      let d = this.position.distance(otherBoid.position);\n\n      if (otherBoid !== this && d < this.perceptionRadius) {\n        steering.add(otherBoid.position);\n        total++;\n      }\n    });\n\n    if (total > 0) {\n      steering.divideScalar(total);\n      steering.subtract(this.position);\n      setMagnitude(steering, this.maxSpeed);\n      steering.subtract(this.velocity);\n      steering.limit(this.maxForce, this.maxForce);\n    }\n\n    return steering;\n  }\n\n  separation(boidsArr) {\n    let steering = new Victor();\n\n    let total = 0;\n\n    boidsArr.forEach((otherBoid) => {\n      let d = this.position.distance(otherBoid.position);\n\n      if (otherBoid !== this && d < this.perceptionRadius) {\n        let diff = new Victor(this.position.x, this.position.y).subtract(\n          otherBoid.position\n        );\n\n        diff.multiplyScalar(1 / d);\n\n        steering.add(diff);\n        total++;\n      }\n    });\n\n    if (total > 0) {\n      steering.divideScalar(total);\n\n      setMagnitude(steering, this.maxSpeed);\n      steering.subtract(this.velocity);\n      steering.limit(this.maxForce, this.maxForce);\n    }\n\n    return steering;\n  }\n\n  draw() {\n    const c = this.c;\n    const x = this.position.x;\n    const y = this.position.y;\n\n    c.beginPath();\n    c.arc(x, y, this.radius, 0, 2 * Math.PI, false);\n    c.fillStyle = this.color;\n    c.fill();\n  }\n\n  flock(boidsArr, alignmentVal, cohesionVal, separationVal) {\n    let alignment = this.align(boidsArr);\n    alignment.multiplyScalar(alignmentVal / 10);\n\n    let cohesion = this.cohesion(boidsArr);\n    cohesion.multiplyScalar(cohesionVal / 10);\n\n    let separation = this.separation(boidsArr);\n    separation.multiplyScalar(separationVal / 10);\n\n    this.acceleration.add(separation);\n    this.acceleration.add(alignment);\n    this.acceleration.add(cohesion);\n  }\n\n  execute(boidsArr, alignmentVal, cohesionVal, separationVal) {\n    this.bound();\n    this.flock(boidsArr, alignmentVal, cohesionVal, separationVal);\n    this.update();\n    this.draw();\n  }\n}\n\nexport default Boid;\n","import \"../styles/index.scss\";\nimport { getRandomInt } from \"./utils\";\nimport Boid from \"./Boid\";\n\nif (process.env.NODE_ENV === \"development\") {\n  require(\"../index.html\");\n}\n\nexport let width = window.innerWidth;\nexport let height = window.innerHeight;\n\nlet canvas = document.querySelector(\"canvas\");\n\nlet alignmentSlider = document.getElementById(\"alignmentSlider\");\nlet cohesionSlider = document.getElementById(\"cohesionSlider\");\nlet separationSlider = document.getElementById(\"separationSlider\");\n\nlet alignmentVal = alignmentSlider.value;\nlet cohesionVal = cohesionSlider.value;\nlet separationVal = separationSlider.value;\n\nlet resetBtn = document.getElementById(\"resetBtn\");\n\nalignmentSlider.addEventListener(\"change\", () => {\n  alignmentVal = alignmentSlider.value;\n});\n\ncohesionSlider.addEventListener(\"change\", () => {\n  cohesionVal = cohesionSlider.value;\n});\n\nseparationSlider.addEventListener(\"change\", () => {\n  separationVal = separationSlider.value;\n});\n\ncanvas.width = width;\ncanvas.height = height;\n\nexport let c = canvas.getContext(\"2d\");\n\nlet boidsArr = [];\nlet numBoids = 200;\n\nlet showTrails = true;\n\nconst colors = [\"#ffbe0b\", \"#fb5607\", \"#ff006e\", \"#8338ec\", \"#3a86ff\"];\n\nfor (let i = 0; i < numBoids; i++) {\n  boidsArr.push(\n    new Boid(c, colors[getRandomInt(1, colors.length)], getRandomInt(1, 3))\n  );\n}\n\nresetBtn.addEventListener(\"click\", () => {\n  boidsArr = [];\n\n  alignmentSlider.value = 10;\n  cohesionSlider.value = 10;\n  separationSlider.value = 10;\n\n  alignmentVal = 10;\n  cohesionVal = 10;\n  separationVal = 10;\n\n  for (let i = 0; i < numBoids; i++) {\n    boidsArr.push(\n      new Boid(c, colors[getRandomInt(1, colors.length)], getRandomInt(1, 3))\n    );\n  }\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  c.fillStyle = `rgba(1, 1, 10,${showTrails ? \"0.2\" : \"1\"} )`;\n  c.fillRect(0, 0, width, height);\n\n  boidsArr.forEach(boid => {\n    boid.execute(boidsArr, alignmentVal, cohesionVal, separationVal);\n  });\n}\n\nanimate();\n"],"sourceRoot":""}